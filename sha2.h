/**
 stupid_sha2 - simple and suboptimal implementation of SHA2 secure hashes.
 =========================================================================
 v0.0.1
 Licensed under the MIT License
 (c) 2024 Vincent Cruz
 
 About:
 ------
 This header file provides functions to compute the SHA2 secure hashes 
 (SHA-224, SHA-256, SHA-384 and SHA-512).
 
 Note:
 ---------
 This is a toy project. DO NOT USE IT in production code.
  
 Building:
 ---------
 Before include this file, add the following line
```c
     #define STUPID_SHA2_IMPLEMENTATION
```
 
 Usage:
 ------
 The following functions computes the hashes of `count` bytes in `data` and
 stores the result in `digest`.
```c
bool sha_224(const unsigned char *data, size_t count, unsigned char *digest);
bool sha_256(const unsigned char *data, size_t count, unsigned char *digest);
bool sha_384(const unsigned char *data, size_t count, unsigned char *digest);
bool sha_512(const unsigned char *data, size_t count, unsigned char *digest);
```
Note that those functions does not check if digest is valid and large enough to store 
the computed hash.

```c
typedef enum {
	SHA_INVALID = -1,
	SHA_224 = 0,
	SHA_256,
	SHA_384,
	SHA_512
} sha_alg_t;

bool sha_224_256_init(sha_224_256_ctx_t *ctx, sha_alg_t alg);
void sha_224_256_update(sha_224_256_ctx_t *ctx, uint8_t v);
void sha_224_256_finalize(sha_224_256_ctx_t *ctx);

bool sha_384_512_init(sha_224_256_ctx_t *ctx, sha_alg_t alg);
void sha_384_512_update(sha_224_256_ctx_t *ctx, uint8_t v);
void sha_384_512_finalize(sha_224_256_ctx_t *ctx);
```

`sha_xxx_yyy_init` initializes the context. `alg` specifies which SHA2 to use.
Note the function will return false if the requested algorithm is not supported.
For example calling `sha_224_256_init` with `SHA_384`.

`sha_xxx_yyy_update` appends a byte to the message to be hashed.

`sha_xxx_yyy_finalize` finishes hash calculations. The computed hash can be accessed
in the `h` buffer of `ctx`. The rest of the input context `ctx` is cleared.

 Testing:
 ---------
 To run unit tests, define the following varable before include the file
```c
     #define STUPID_SHA2_TEST
```
 This will create an executable where each hash functions will be checked against 
 various test vectors.

```
$ echo '#include "sha2.h"' | gcc -Wall -Wextra -pedantic -O3 -DSTUPID_SHA2_TEST -x c - && ./a.out
[sha224] running test #0...
[sha256] running test #0...
[sha384] running test #0...
[sha512] running test #0...
[sha224] running test #1...
[sha256] running test #1...
[sha384] running test #1...
[sha512] running test #1...
[sha224] running test #2...
[sha256] running test #2...
[sha384] running test #2...
[sha512] running test #2...
[sha224] running test #3...
[sha256] running test #3...
[sha384] running test #3...
[sha512] running test #3...
[sha224] running test #4...
[sha256] running test #4...
[sha384] running test #4...
[sha512] running test #4...
[sha224] running test #5...
[sha256] running test #5...
[sha384] running test #5...
[sha512] running test #5...
[sha224] running test #6...
[sha256] running test #6...
[sha384] running test #6...
[sha512] running test #6...
28 out of 28 tests passed.
```
 */
#ifndef STUPID_SHA2_H
#define STUPID_SHA2_H

#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef enum {
	SHA_INVALID = -1,
	SHA_224 = 0,
	SHA_256,
	SHA_384,
	SHA_512
} sha_alg_t;

typedef struct {
	sha_alg_t alg;
	uint32_t step;
	uint64_t length;
	uint32_t h[8];
	uint32_t w[64];
} sha_224_256_ctx_t;

bool sha_224(const unsigned char *data, size_t count, unsigned char *digest);
bool sha_256(const unsigned char *data, size_t count, unsigned char *digest);

bool sha_224_256_init(sha_224_256_ctx_t *ctx, sha_alg_t alg);
void sha_224_256_update(sha_224_256_ctx_t *ctx, uint8_t v);
void sha_224_256_finalize(sha_224_256_ctx_t *ctx);

typedef struct {
	sha_alg_t alg;
	uint32_t step;
	uint64_t length_lo;
	uint64_t length_hi;
	uint64_t h[8];
	uint64_t w[80];
} sha_384_512_ctx_t;

bool sha_384(const unsigned char *data, size_t count, unsigned char *digest);
bool sha_512(const unsigned char *data, size_t count, unsigned char *digest);

bool sha_384_512_init(sha_384_512_ctx_t *ctx, sha_alg_t alg);
void sha_384_512_update(sha_384_512_ctx_t *ctx, uint8_t v);
void sha_384_512_finalize(sha_384_512_ctx_t *ctx);

#ifdef __cplusplus
}
#endif

#endif // STUPID_SHA2_H

#ifdef STUPID_SHA2_TEST
#	define STUPID_SHA2_IMPLEMENTATION
#endif // STUPID_SHA2_TEST

#ifdef STUPID_SHA2_IMPLEMENTATION

enum {
	SHA_224_HASH_SIZE = 28U,
	SHA_256_HASH_SIZE = 32U,
	SHA_384_HASH_SIZE = 48U,
	SHA_512_HASH_SIZE = 64U 
};

static inline uint32_t hash_size(sha_alg_t alg) {
	switch(alg) {
		case SHA_224:
			return SHA_224_HASH_SIZE;
		case SHA_256:
			return SHA_256_HASH_SIZE;
		case SHA_384:
			return SHA_384_HASH_SIZE;
		case SHA_512:
			return SHA_512_HASH_SIZE;
		default:
			return 0;		
	}
}

static inline uint32_t shr32(uint32_t x, uint32_t n) {
	return x >> n;
}

static inline uint32_t rotr32(uint32_t x, uint32_t n) {
	n &= 31U;
	return (x >> n) | (x << (32U - n));
}

static inline uint32_t ch32(uint32_t x, uint32_t y, uint32_t z) {
	return (x & y) ^ ((~x) & z);
}

static inline uint32_t maj32(uint32_t x, uint32_t y, uint32_t z) {
	return (x & y) ^ (x & z) ^ (y & z);
}

static inline uint32_t bsig0_32(uint32_t x) {
	return rotr32(x, 2U) ^ rotr32(x, 13U) ^ rotr32(x, 22U);
}

static inline uint32_t bsig1_32(uint32_t x) {
	return rotr32(x, 6U) ^ rotr32(x, 11U) ^ rotr32(x, 25U);
}

static inline uint32_t ssig0_32(uint32_t x) {
	return rotr32(x, 7U) ^ rotr32(x, 18) ^ shr32(x, 3);
}

static inline uint32_t ssig1_32(uint32_t x) {
	return rotr32(x, 17U) ^ rotr32(x, 19U) ^ shr32(x, 10U);
}

bool sha_224_256_init(sha_224_256_ctx_t *ctx, sha_alg_t alg) {
	bool ret = false;
	memset(ctx, 0, sizeof(sha_224_256_ctx_t));
	if((ctx == NULL) || ((alg != SHA_224) && (alg != SHA_256))) {
		ctx->alg = SHA_INVALID;
	} else {
		ctx->alg = alg;
		if(alg == SHA_224) {
			ctx->h[0] = 0xC1059ED8U;
			ctx->h[1] = 0x367CD507U;
			ctx->h[2] = 0x3070DD17U;
			ctx->h[3] = 0xF70E5939U;
			ctx->h[4] = 0xFFC00B31U;
			ctx->h[5] = 0x68581511U;
			ctx->h[6] = 0x64F98FA7U;
			ctx->h[7] = 0xBEFA4FA4U;
		} else {
			ctx->h[0] = 0x6A09E667U;
			ctx->h[1] = 0xBB67AE85U;
			ctx->h[2] = 0x3C6EF372U;
			ctx->h[3] = 0xA54FF53AU;
			ctx->h[4] = 0x510E527FU;
			ctx->h[5] = 0x9B05688CU;
			ctx->h[6] = 0x1F83D9ABU;
			ctx->h[7] = 0x5BE0CD19U;
		}
		ret = true;
	}
	return ret;
}

void sha_224_256_update(sha_224_256_ctx_t *ctx, uint8_t v) {
	static const uint32_t g_k_32[64] = {
		0x428A2F98U, 0x71374491U, 0xB5C0FBCFU, 0xE9B5DBA5U,
		0x3956C25BU, 0x59F111F1U, 0x923F82A4U, 0xAB1C5ED5U,
		0xD807AA98U, 0x12835B01U, 0x243185BEU, 0x550C7DC3U,
		0x72BE5D74U, 0x80DEB1FEU, 0x9BDC06A7U, 0xC19BF174U,
		0xE49B69C1U, 0xEFBE4786U, 0x0FC19DC6U, 0x240CA1CCU,
		0x2DE92C6FU, 0x4A7484AAU, 0x5CB0A9DCU, 0x76F988DAU,
		0x983E5152U, 0xA831C66DU, 0xB00327C8U, 0xBF597FC7U,
		0xC6E00BF3U, 0xD5A79147U, 0x06CA6351U, 0x14292967U,
		0x27B70A85U, 0x2E1B2138U, 0x4D2C6DFCU, 0x53380D13U,
		0x650A7354U, 0x766A0ABBU, 0x81C2C92EU, 0x92722C85U,
		0xA2BFE8A1U, 0xA81A664BU, 0xC24B8B70U, 0xC76C51A3U,
		0xD192E819U, 0xD6990624U, 0xF40E3585U, 0x106AA070U,
		0x19A4C116U, 0x1E376C08U, 0x2748774CU, 0x34B0BCB5U,
		0x391C0CB3U, 0x4ED8AA4AU, 0x5B9CCA4FU, 0x682E6FF3U,
		0x748F82EEU, 0x78A5636FU, 0x84C87814U, 0x8CC70208U,
		0x90BEFFFAU, 0xA4506CEBU, 0xBEF9A3F7U, 0xC67178F2U
	};
	
	uint32_t index = (ctx->step >> 2);
	ctx->w[index] <<= 8;
	ctx->w[index] |= v;

	ctx->step++;
	if(ctx->step == 64U) {
		uint32_t a = ctx->h[0];
		uint32_t b = ctx->h[1];
		uint32_t c = ctx->h[2];
		uint32_t d = ctx->h[3];
		uint32_t e = ctx->h[4];
		uint32_t f = ctx->h[5];
		uint32_t g = ctx->h[6];
		uint32_t h = ctx->h[7];

		for(uint32_t i=16U; i<64U; i++) {
			ctx->w[i] = ssig1_32(ctx->w[i - 2U]) + ctx->w[i - 7U] + ssig0_32(ctx->w[i - 15U]) + ctx->w[i - 16U];
		}

		for(uint32_t i=0; i<64U; i++) {
			uint32_t t1 = h + bsig1_32(e) + ch32(e,f,g) + g_k_32[i] + ctx->w[i];
			uint32_t t2 = bsig0_32(a) + maj32(a,b,c);
			h = g;
			g = f;
			f = e;
			e = d + t1;
			d = c;
			c = b;
			b = a;
			a = t1 + t2;
		}

		ctx->h[0] += a;
		ctx->h[1] += b;
		ctx->h[2] += c;
		ctx->h[3] += d;
		ctx->h[4] += e;
		ctx->h[5] += f;
		ctx->h[6] += g;
		ctx->h[7] += h;

		ctx->step = 0;
	}
	ctx->length += 8U;
}

void sha_224_256_finalize(sha_224_256_ctx_t *ctx) {
	uint64_t len = ctx->length;
	sha_224_256_update(ctx, 0x80U);
	while(ctx->step != 56U) {
		sha_224_256_update(ctx, 0x00);
	}
	for(int32_t i=56; i>=0; i-=8) {
		sha_224_256_update(ctx, (len >> i) & 0xFFU);
	}

	ctx->length = 0;
	memset(ctx->w, 0, sizeof(uint32_t[64]));
}

static inline bool sha_224_256(sha_alg_t alg, const unsigned char *data, size_t count, unsigned char *digest) {
	bool ret = false;
	sha_224_256_ctx_t ctx;
	if(sha_224_256_init(&ctx, alg) == true) {
		uint32_t sz = hash_size(alg);
		for(size_t i=0; i<count; i++) {
			sha_224_256_update(&ctx, data[i]);
		}
		sha_224_256_finalize(&ctx);
		for(uint32_t i=0; i<sz; i++) {
			digest[i] = ctx.h[i>>2] >> (8U * (3U - (i & 0x03U)));
		}
		ret = true;
	}
	return ret;
}

bool sha_224(const unsigned char *data, size_t count, unsigned char *digest) {
	return sha_224_256(SHA_224, data, count, digest);
}

bool sha_256(const unsigned char *data, size_t count, unsigned char *digest) {
	return sha_224_256(SHA_256, data, count, digest);
}

static inline uint64_t shr64(uint64_t x, uint64_t n) {
	return x >> n;
}

static inline uint64_t rotr64(uint64_t x, uint32_t n) {
	n &= 63U;
	return (x >> n) | (x << (64U - n));
}

static inline uint64_t ch64(uint64_t x, uint64_t y, uint64_t z) {
	return (x & y) ^ ((~x) & z);
}

static inline uint64_t maj64(uint64_t x, uint64_t y, uint64_t z) {
	return (x & y) ^ (x & z) ^ (y & z);
}

static inline uint64_t bsig0_64(uint64_t x) {
	return rotr64(x, 28U) ^ rotr64(x, 34U) ^ rotr64(x, 39U);
}

static inline uint64_t bsig1_64(uint64_t x) {
	return rotr64(x, 14U) ^ rotr64(x, 18U) ^ rotr64(x, 41U);
}

static inline uint64_t ssig0_64(uint64_t x) {
	return rotr64(x, 1U) ^ rotr64(x, 8U) ^ shr64(x, 7U);
}

static inline uint64_t ssig1_64(uint64_t x) {
	return rotr64(x, 19U) ^ rotr64(x, 61U) ^ shr64(x, 6U);
}

bool sha_384_512_init(sha_384_512_ctx_t *ctx, sha_alg_t alg) {
	bool ret = false;
	memset(ctx, 0, sizeof(sha_384_512_ctx_t));
	if((ctx == NULL) || ((alg != SHA_384) && (alg != SHA_512))) {
		ctx->alg = SHA_INVALID;
		ret = false;
	} else {
		ctx->alg = alg;
		if(alg == SHA_384) {
			ctx->h[0] = 0xCBBB9D5DC1059ED8UL;
			ctx->h[1] = 0x629A292A367CD507UL;
			ctx->h[2] = 0x9159015A3070DD17UL;
			ctx->h[3] = 0x152FECD8F70E5939UL;
			ctx->h[4] = 0x67332667FFC00B31UL;
			ctx->h[5] = 0x8EB44A8768581511UL;
			ctx->h[6] = 0xDB0C2E0D64F98FA7UL;
			ctx->h[7] = 0x47B5481DBEFA4FA4UL;
		} else {
			ctx->h[0] = 0x6A09E667F3BCC908UL;
			ctx->h[1] = 0xBB67AE8584CAA73BUL;
			ctx->h[2] = 0x3C6EF372FE94F82BUL;
			ctx->h[3] = 0xA54FF53A5F1D36F1UL;
			ctx->h[4] = 0x510E527FADE682D1UL;
			ctx->h[5] = 0x9B05688C2B3E6C1FUL;
			ctx->h[6] = 0x1F83D9ABFB41BD6BUL;
			ctx->h[7] = 0x5BE0CD19137E2179UL;
		}
		ret = true;
	}
	return ret;
}

void sha_384_512_update(sha_384_512_ctx_t *ctx, uint8_t v) {
	static const uint64_t g_k_64[] = {
		0x428A2F98D728AE22UL, 0x7137449123EF65CDUL, 0xB5C0FBCFEC4D3B2FUL, 0xE9B5DBA58189DBBCUL,
		0x3956C25BF348B538UL, 0x59F111F1B605D019UL, 0x923F82A4AF194F9BUL, 0xAB1C5ED5DA6D8118UL,
		0xD807AA98A3030242UL, 0x12835B0145706FBEUL, 0x243185BE4EE4B28CUL, 0x550C7DC3D5FFB4E2UL,
		0x72BE5D74F27B896FUL, 0x80DEB1FE3B1696B1UL, 0x9BDC06A725C71235UL, 0xC19BF174CF692694UL,
		0xE49B69C19EF14AD2UL, 0xEFBE4786384F25E3UL, 0x0FC19DC68B8CD5B5UL, 0x240CA1CC77AC9C65UL,
		0x2DE92C6F592B0275UL, 0x4A7484AA6EA6E483UL, 0x5CB0A9DCBD41FBD4UL, 0x76F988DA831153B5UL,
		0x983E5152EE66DFABUL, 0xA831C66D2DB43210UL, 0xB00327C898FB213FUL, 0xBF597FC7BEEF0EE4UL,
		0xC6E00BF33DA88FC2UL, 0xD5A79147930AA725UL, 0x06CA6351E003826FUL, 0x142929670A0E6E70UL,
		0x27B70A8546D22FFCUL, 0x2E1B21385C26C926UL, 0x4D2C6DFC5AC42AEDUL, 0x53380D139D95B3DFUL,
		0x650A73548BAF63DEUL, 0x766A0ABB3C77B2A8UL, 0x81C2C92E47EDAEE6UL, 0x92722C851482353BUL,
		0xA2BFE8A14CF10364UL, 0xA81A664BBC423001UL, 0xC24B8B70D0F89791UL, 0xC76C51A30654BE30UL,
		0xD192E819D6EF5218UL, 0xD69906245565A910UL, 0xF40E35855771202AUL, 0x106AA07032BBD1B8UL,
		0x19A4C116B8D2D0C8UL, 0x1E376C085141AB53UL, 0x2748774CDF8EEB99UL, 0x34B0BCB5E19B48A8UL,
		0x391C0CB3C5C95A63UL, 0x4ED8AA4AE3418ACBUL, 0x5B9CCA4F7763E373UL, 0x682E6FF3D6B2B8A3UL,
		0x748F82EE5DEFB2FCUL, 0x78A5636F43172F60UL, 0x84C87814A1F0AB72UL, 0x8CC702081A6439ECUL,
		0x90BEFFFA23631E28UL, 0xA4506CEBDE82BDE9UL, 0xBEF9A3F7B2C67915UL, 0xC67178F2E372532BUL,
		0xCA273ECEEA26619CUL, 0xD186B8C721C0C207UL, 0xEADA7DD6CDE0EB1EUL, 0xF57D4F7FEE6ED178UL,
		0x06F067AA72176FBAUL, 0x0A637DC5A2C898A6UL, 0x113F9804BEF90DAEUL, 0x1B710B35131C471BUL,
		0x28DB77F523047D84UL, 0x32CAAB7B40C72493UL, 0x3C9EBE0A15C9BEBCUL, 0x431D67C49C100D4CUL,
		0x4CC5D4BECB3E42B6UL, 0x597F299CFC657E2AUL, 0x5FCB6FAB3AD6FAECUL, 0x6C44198C4A475817UL
	};

	uint32_t index = (ctx->step >> 3);
	ctx->w[index] <<= 8;
	ctx->w[index] |= v;

	ctx->step++;
	if(ctx->step == 128U) {
		uint64_t a = ctx->h[0];
		uint64_t b = ctx->h[1];
		uint64_t c = ctx->h[2];
		uint64_t d = ctx->h[3];
		uint64_t e = ctx->h[4];
		uint64_t f = ctx->h[5];
		uint64_t g = ctx->h[6];
		uint64_t h = ctx->h[7];

		for(uint32_t i=16U; i<80U; i++) {
			ctx->w[i] = ssig1_64(ctx->w[i - 2U]) + ctx->w[i - 7U] + ssig0_64(ctx->w[i - 15U]) + ctx->w[i - 16U];
		}

		for(uint32_t i=0; i<80U; i++) {
			uint64_t t1 = h + bsig1_64(e) + ch64(e,f,g) + g_k_64[i] + ctx->w[i];
			uint64_t t2 = bsig0_64(a) + maj64(a,b,c);
			h = g;
			g = f;
			f = e;
			e = d + t1;
			d = c;
			c = b;
			b = a;
			a = t1 + t2;
		}

		ctx->h[0] += a;
		ctx->h[1] += b;
		ctx->h[2] += c;
		ctx->h[3] += d;
		ctx->h[4] += e;
		ctx->h[5] += f;
		ctx->h[6] += g;
		ctx->h[7] += h;

		ctx->step = 0;
	}
	uint64_t tmp = ctx->length_lo;
	ctx->length_lo += 8U;
	if(ctx->length_lo < tmp) {
		++ctx->length_hi;
	}
}

void sha_384_512_finalize(sha_384_512_ctx_t *ctx) {
	uint64_t len_hi = ctx->length_hi;
	uint64_t len_lo = ctx->length_lo;
	sha_384_512_update(ctx, 0x80U);
	while(ctx->step != 112U) {
		sha_384_512_update(ctx, 0x00);
	}
	for(int32_t i=56; i>=0; i-=8) {
		sha_384_512_update(ctx, (len_hi >> i) & 0xFFU);
	}
	for(int32_t i=56; i>=0; i-=8) {
		sha_384_512_update(ctx, (len_lo >> i) & 0xFFU);
	}
	ctx->length_lo = 0;
	ctx->length_hi = 0;
	memset(ctx->w, 0, sizeof(uint64_t[80]));
}

static inline bool sha_384_512(sha_alg_t alg, const unsigned char *data, size_t count, unsigned char *digest) {
	bool ret = false;
	sha_384_512_ctx_t ctx;
	if(sha_384_512_init(&ctx, alg) == true) {
		uint32_t sz = hash_size(alg);
		for(size_t i=0; i<count; i++) {
			sha_384_512_update(&ctx, data[i]);
		}
		sha_384_512_finalize(&ctx);
		for(uint32_t i=0; i<sz; i++) {
			digest[i] = ctx.h[i>>3] >> (8U * (7U - (i & 0x07U)));
		}
		ret = true;
	}
	return ret;
}

bool sha_384(const unsigned char *data, size_t count, unsigned char *digest) {
	return sha_384_512(SHA_384, data, count, digest);
}

bool sha_512(const unsigned char *data, size_t count, unsigned char *digest) {
	return sha_384_512(SHA_512, data, count, digest);
}

#ifdef STUPID_SHA2_TEST

#include <stdio.h>
#include <stdlib.h>

#define TEST_VECTOR_LENGTH(v) (sizeof(v) - 1)

typedef struct {
	const char *msg;
	size_t len;
	size_t repeat;
	unsigned char digest_224[28];
	unsigned char digest_256[32];
	unsigned char digest_384[48];
	unsigned char digest_512[64];
} test_vector_t;

bool sha_224_256_test(const test_vector_t *test_vector, sha_alg_t alg) {
	unsigned char digest[64];
	sha_224_256_ctx_t ctx;
	bool ret = false;
	const unsigned char *expected_digest;
	
	if(alg == SHA_224) {
		expected_digest = &test_vector->digest_224[0];
	} else if(alg == SHA_256) {
		expected_digest = &test_vector->digest_256[0];
	} else {
		expected_digest = NULL;
	}

	if(expected_digest) {
		if(sha_224_256_init(&ctx, alg) == true) {
			uint32_t sz = hash_size(alg);
			const unsigned char *data = (const unsigned char*)test_vector->msg;

			for(size_t i=0; i<test_vector->repeat; i++) {
				for(size_t j=0; j<test_vector->len; j++) {
					sha_224_256_update(&ctx, data[j]);
				}
			}

			sha_224_256_finalize(&ctx);
			
			for(uint32_t i=0; i<sz; i++) {
				digest[i] = ctx.h[i>>2] >> (8 * (3 - (i & 0x03)));
			}
			
			if(memcmp(expected_digest, digest, sz) == 0) {
				ret = true;
			}
		}
	}
	return ret;
}

bool sha_224_test(const test_vector_t *test_vector) {
	return sha_224_256_test(test_vector, SHA_224);
}

bool sha_256_test(const test_vector_t *test_vector) {
	return sha_224_256_test(test_vector, SHA_256);
}

bool sha_384_512_test(const test_vector_t *test_vector, sha_alg_t alg) {
	unsigned char digest[64];
	sha_384_512_ctx_t ctx;
	bool ret = false;
	const unsigned char *expected_digest;
	
	if(alg == SHA_384) {
		expected_digest = &test_vector->digest_384[0];
	} else if(alg == SHA_512) {
		expected_digest = &test_vector->digest_512[0];
	} else {
		expected_digest = NULL;
	}

	if(expected_digest) {
		if(sha_384_512_init(&ctx, alg) == true) {
			uint32_t sz = hash_size(alg);
			const unsigned char *data = (const unsigned char*)test_vector->msg;

			for(size_t i=0; i<test_vector->repeat; i++) {
				for(size_t j=0; j<test_vector->len; j++) {
					sha_384_512_update(&ctx, data[j]);
				}
			}

			sha_384_512_finalize(&ctx);
			
			for(uint32_t i=0; i<sz; i++) {
				digest[i] = ctx.h[i>>3] >> (8 * (7 - (i & 0x07)));
			}
			
			if(memcmp(expected_digest, digest, sz) == 0) {
				ret = true;
			}
		}
	}
	return ret;
}

bool sha_384_test(const test_vector_t *test_vector) {
	return sha_384_512_test(test_vector, SHA_384);
}

bool sha_512_test(const test_vector_t *test_vector) {
	return sha_384_512_test(test_vector, SHA_512);
}

int main() {
	const struct {
		const char *name;
		bool (*fn)(const test_vector_t *);
	} test_func[] = {
		{"sha224", sha_224_test},
		{"sha256", sha_256_test},
		{"sha384", sha_384_test},
		{"sha512", sha_512_test}
	};

	const size_t test_func_count = sizeof(test_func) / sizeof(test_func[0]);

	const char empty_str[] = "";
	const char test0[] = "abc";
	const char test1[] = "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
	const char test2[] = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu";
	const char test3[] = "a";
	const char test4[] = "0123456701234567012345670123456701234567012345670123456701234567";
	const char test5[] = "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno";

	const test_vector_t test_vector[] = {
		{ 
			empty_str, TEST_VECTOR_LENGTH(empty_str), 1,
			{ 0xD1,0x4A,0x02,0x8C,0x2A,0x3A,0x2B,0xC9,0x47,0x61,0x02,0xBB,0x28,0x82,0x34,0xC4,
			  0x15,0xA2,0xB0,0x1F,0x82,0x8E,0xA6,0x2A,0xC5,0xB3,0xE4,0x2F },
			{ 0xE3,0xB0,0xC4,0x42,0x98,0xFC,0x1C,0x14,0x9A,0xFB,0xF4,0xC8,0x99,0x6F,0xB9,0x24,
			  0x27,0xAE,0x41,0xE4,0x64,0x9B,0x93,0x4C,0xA4,0x95,0x99,0x1B,0x78,0x52,0xB8,0x55 },
			{ 0x38,0xB0,0x60,0xA7,0x51,0xAC,0x96,0x38,0x4C,0xD9,0x32,0x7E,0xB1,0xB1,0xE3,0x6A,
			  0x21,0xFD,0xB7,0x11,0x14,0xBE,0x07,0x43,0x4C,0x0C,0xC7,0xBF,0x63,0xF6,0xE1,0xDA,
			  0x27,0x4E,0xDE,0xBF,0xE7,0x6F,0x65,0xFB,0xD5,0x1A,0xD2,0xF1,0x48,0x98,0xB9,0x5B },
			{ 0xCF,0x83,0xE1,0x35,0x7E,0xEF,0xB8,0xBD,0xF1,0x54,0x28,0x50,0xD6,0x6D,0x80,0x07,
			  0xD6,0x20,0xE4,0x05,0x0B,0x57,0x15,0xDC,0x83,0xF4,0xA9,0x21,0xD3,0x6C,0xE9,0xCE,
			  0x47,0xD0,0xD1,0x3C,0x5D,0x85,0xF2,0xB0,0xFF,0x83,0x18,0xD2,0x87,0x7E,0xEC,0x2F,
			  0x63,0xB9,0x31,0xBD,0x47,0x41,0x7A,0x81,0xA5,0x38,0x32,0x7A,0xF9,0x27,0xDA,0x3E }
		},
		{ 
			test0, TEST_VECTOR_LENGTH(test0), 1,
			{ 0x23,0x09,0x7D,0x22,0x34,0x05,0xD8,0x22,0x86,0x42,0xA4,0x77,0xBD,0xA2,0x55,0xB3,
			  0x2A,0xAD,0xBC,0xE4,0xBD,0xA0,0xB3,0xF7,0xE3,0x6C,0x9D,0xA7 },
			{ 0xBA,0x78,0x16,0xBF,0x8F,0x01,0xCF,0xEA,0x41,0x41,0x40,0xDE,0x5D,0xAE,0x22,0x23,
			  0xB0,0x03,0x61,0xA3,0x96,0x17,0x7A,0x9C,0xB4,0x10,0xFF,0x61,0xF2,0x00,0x15,0xAD },
			{ 0xCB,0x00,0x75,0x3F,0x45,0xA3,0x5E,0x8B,0xB5,0xA0,0x3D,0x69,0x9A,0xC6,0x50,0x07,
			  0x27,0x2C,0x32,0xAB,0x0E,0xDE,0xD1,0x63,0x1A,0x8B,0x60,0x5A,0x43,0xFF,0x5B,0xED,
			  0x80,0x86,0x07,0x2B,0xA1,0xE7,0xCC,0x23,0x58,0xBA,0xEC,0xA1,0x34,0xC8,0x25,0xA7 },
			{ 0xDD,0xAF,0x35,0xA1,0x93,0x61,0x7A,0xBA,0xCC,0x41,0x73,0x49,0xAE,0x20,0x41,0x31, 
			  0x12,0xE6,0xFA,0x4E,0x89,0xA9,0x7E,0xA2,0x0A,0x9E,0xEE,0xE6,0x4B,0x55,0xD3,0x9A,
			  0x21,0x92,0x99,0x2A,0x27,0x4F,0xC1,0xA8,0x36,0xBA,0x3C,0x23,0xA3,0xFE,0xEB,0xBD,
			  0x45,0x4D,0x44,0x23,0x64,0x3C,0xE8,0x0E,0x2A,0x9A,0xC9,0x4F,0xA5,0x4C,0xA4,0x9F }
		},
		{ 
			test1, TEST_VECTOR_LENGTH(test1), 1,
			{ 0x75,0x38,0x8B,0x16,0x51,0x27,0x76,0xCC,0x5D,0xBA,0x5D,0xA1,0xFD,0x89,0x01,0x50,
			  0xB0,0xC6,0x45,0x5C,0xB4,0xF5,0x8B,0x19,0x52,0x52,0x25,0x25 },
			{ 0x24,0x8D,0x6A,0x61,0xD2,0x06,0x38,0xB8,0xE5,0xC0,0x26,0x93,0x0C,0x3E,0x60,0x39,
			  0xA3,0x3C,0xE4,0x59,0x64,0xFF,0x21,0x67,0xF6,0xEC,0xED,0xD4,0x19,0xDB,0x06,0xC1 },
			{ 0x33,0x91,0xFD,0xDD,0xFC,0x8D,0xC7,0x39,0x37,0x07,0xA6,0x5B,0x1B,0x47,0x09,0x39,
			  0x7C,0xF8,0xB1,0xD1,0x62,0xAF,0x05,0xAB,0xFE,0x8F,0x45,0x0D,0xE5,0xF3,0x6B,0xC6,
			  0xB0,0x45,0x5A,0x85,0x20,0xBC,0x4E,0x6F,0x5F,0xE9,0x5B,0x1F,0xE3,0xC8,0x45,0x2B },
			{ 0x20,0x4A,0x8F,0xC6,0xDD,0xA8,0x2F,0x0A,0x0C,0xED,0x7B,0xEB,0x8E,0x08,0xA4,0x16,
			  0x57,0xC1,0x6E,0xF4,0x68,0xB2,0x28,0xA8,0x27,0x9B,0xE3,0x31,0xA7,0x03,0xC3,0x35,
			  0x96,0xFD,0x15,0xC1,0x3B,0x1B,0x07,0xF9,0xAA,0x1D,0x3B,0xEA,0x57,0x78,0x9C,0xA0,
			  0x31,0xAD,0x85,0xC7,0xA7,0x1D,0xD7,0x03,0x54,0xEC,0x63,0x12,0x38,0xCA,0x34,0x45 }
		},
		{ 
			test2, TEST_VECTOR_LENGTH(test2), 1,
			{ 0xC9,0x7C,0xA9,0xA5,0x59,0x85,0x0C,0xE9,0x7A,0x04,0xA9,0x6D,0xEF,0x6D,0x99,0xA9,
			  0xE0,0xE0,0xE2,0xAB,0x14,0xE6,0xB8,0xDF,0x26,0x5F,0xC0,0xB3 },
			{ 0xCF,0x5B,0x16,0xA7,0x78,0xAF,0x83,0x80,0x03,0x6C,0xE5,0x9E,0x7B,0x04,0x92,0x37,
			  0x0B,0x24,0x9B,0x11,0xE8,0xF0,0x7A,0x51,0xAF,0xAC,0x45,0x03,0x7A,0xFE,0xE9,0xD1 },
			{ 0x09,0x33,0x0C,0x33,0xF7,0x11,0x47,0xE8,0x3D,0x19,0x2F,0xC7,0x82,0xCD,0x1B,0x47,
			  0x53,0x11,0x1B,0x17,0x3B,0x3B,0x05,0xD2,0x2F,0xA0,0x80,0x86,0xE3,0xB0,0xF7,0x12, 
			  0xFC,0xC7,0xC7,0x1A,0x55,0x7E,0x2D,0xB9,0x66,0xC3,0xE9,0xFA,0x91,0x74,0x60,0x39 },
			{ 0x8E,0x95,0x9B,0x75,0xDA,0xE3,0x13,0xDA,0x8C,0xF4,0xF7,0x28,0x14,0xFC,0x14,0x3F,
			  0x8F,0x77,0x79,0xC6,0xEB,0x9F,0x7F,0xA1,0x72,0x99,0xAE,0xAD,0xB6,0x88,0x90,0x18,
			  0x50,0x1D,0x28,0x9E,0x49,0x00,0xF7,0xE4,0x33,0x1B,0x99,0xDE,0xC4,0xB5,0x43,0x3A,
			  0xC7,0xD3,0x29,0xEE,0xB6,0xDD,0x26,0x54,0x5E,0x96,0xE5,0x5B,0x87,0x4B,0xE9,0x09 }
		},
		{ 
			test3, TEST_VECTOR_LENGTH(test3), 1000000UL,
			{ 0x20,0x79,0x46,0x55,0x98,0x0C,0x91,0xD8,0xBB,0xB4,0xC1,0xEA,0x97,0x61,0x8A,0x4B,
			  0xF0,0x3F,0x42,0x58,0x19,0x48,0xB2,0xEE,0x4E,0xE7,0xAD,0x67 },
			{ 0XCD,0xC7,0x6E,0x5C,0x99,0x14,0xFB,0x92,0x81,0xA1,0xC7,0xE2,0x84,0xD7,0x3E,0x67,
			  0xF1,0x80,0x9A,0x48,0xA4,0x97,0x20,0x0E,0x04,0x6D,0x39,0xCC,0xC7,0x11,0x2C,0xD0 },
			{ 0x9D,0x0E,0x18,0x09,0x71,0x64,0x74,0xCB,0x08,0x6E,0x83,0x4E,0x31,0x0A,0x4A,0x1C,
			  0xED,0x14,0x9E,0x9C,0x00,0xF2,0x48,0x52,0x79,0x72,0xCE,0xC5,0x70,0x4C,0x2A,0x5B,
			  0x07,0xB8,0xB3,0xDC,0x38,0xEC,0xC4,0xEB,0xAE,0x97,0xDD,0xD8,0x7F,0x3D,0x89,0x85 },
			{ 0xE7,0x18,0x48,0x3D,0x0C,0xE7,0x69,0x64,0x4E,0x2E,0x42,0xC7,0xBC,0x15,0xB4,0x63,
			  0x8E,0x1F,0x98,0xB1,0x3B,0x20,0x44,0x28,0x56,0x32,0xA8,0x03,0xAF,0xA9,0x73,0xEB,
			  0xDE,0x0F,0xF2,0x44,0x87,0x7E,0xA6,0x0A,0x4C,0xB0,0x43,0x2C,0xE5,0x77,0xC3,0x1B,
			  0xEB,0x00,0x9C,0x5C,0x2C,0x49,0xAA,0x2E,0x4E,0xAD,0xB2,0x17,0xAD,0x8C,0xC0,0x9B }
		},
		{ 
			test4, TEST_VECTOR_LENGTH(test4), 10,
			{ 0x56,0x7F,0x69,0xF1,0x68,0xCD,0x78,0x44,0xE6,0x52,0x59,0xCE,0x65,0x8F,0xE7,0xAA,
			  0xDF,0xA2,0x52,0x16,0xE6,0x8E,0xCA,0x0E,0xB7,0xAB,0x82,0x62 },
			{ 0x59,0x48,0x47,0x32,0x84,0x51,0xBD,0xFA,0x85,0x05,0x62,0x25,0x46,0x2C,0xC1,0xD8,
			  0x67,0xD8,0x77,0xFB,0x38,0x8D,0xF0,0xCE,0x35,0xF2,0x5A,0xB5,0x56,0x2B,0xFB,0xB5 },
			{ 0x2F,0xC6,0x4A,0x4F,0x50,0x0D,0xDB,0x68,0x28,0xF6,0xA3,0x43,0x0B,0x8D,0xD7,0x2A,
			  0x36,0x8E,0xB7,0xF3,0xA8,0x32,0x2A,0x70,0xBC,0x84,0x27,0x5B,0x9C,0x0B,0x3A,0xB0,
			  0x0D,0x27,0xA5,0xCC,0x3C,0x2D,0x22,0x4A,0xA6,0xB6,0x1A,0x0D,0x79,0xFB,0x45,0x96 },
			{ 0x89,0xD0,0x5B,0xA6,0x32,0xC6,0x99,0xC3,0x12,0x31,0xDE,0xD4,0xFF,0xC1,0x27,0xD5,
			  0xA8,0x94,0xDA,0xD4,0x12,0xC0,0xE0,0x24,0xDB,0x87,0x2D,0x1A,0xBD,0x2B,0xA8,0x14,
			  0x1A,0x0F,0x85,0x07,0x2A,0x9B,0xE1,0xE2,0xAA,0x04,0xCF,0x33,0xC7,0x65,0xCB,0x51,
			  0x08,0x13,0xA3,0x9C,0xD5,0xA8,0x4C,0x4A,0xCA,0xA6,0x4D,0x3F,0x3F,0xB7,0xBA,0xE9 }
		},
		{ 
			test5, TEST_VECTOR_LENGTH(test5), 16777216UL,
			{ 0xb5,0x98,0x97,0x13,0xca,0x4f,0xe4,0x7a,0x00,0x9f,0x86,0x21,0x98,0x0b,0x34,0xe6,
			  0xd6,0x3e,0xd3,0x06,0x3b,0x2a,0x0a,0x2c,0x86,0x7d,0x8a,0x85 },
			{ 0x50,0xe7,0x2a,0x0e,0x26,0x44,0x2f,0xe2,0x55,0x2d,0xc3,0x93,0x8a,0xc5,0x86,0x58,
			  0x22,0x8c,0x0c,0xbf,0xb1,0xd2,0xca,0x87,0x2a,0xe4,0x35,0x26,0x6f,0xcd,0x05,0x5e },
			{ 0x54,0x41,0x23,0x5c,0xc0,0x23,0x53,0x41,0xed,0x80,0x6a,0x64,0xfb,0x35,0x47,0x42,
			  0xb5,0xe5,0xc0,0x2a,0x3c,0x5c,0xb7,0x1b,0x5f,0x63,0xfb,0x79,0x34,0x58,0xd8,0xfd,
			  0xae,0x59,0x9c,0x8c,0xd8,0x88,0x49,0x43,0xc0,0x4f,0x11,0xb3,0x1b,0x89,0xf0,0x23 },
			{ 0xb4,0x7c,0x93,0x34,0x21,0xea,0x2d,0xb1,0x49,0xad,0x6e,0x10,0xfc,0xe6,0xc7,0xf9,
			  0x3d,0x07,0x52,0x38,0x01,0x80,0xff,0xd7,0xf4,0x62,0x9a,0x71,0x21,0x34,0x83,0x1d,
			  0x77,0xbe,0x60,0x91,0xb8,0x19,0xed,0x35,0x2c,0x29,0x67,0xa2,0xe2,0xd4,0xfa,0x50,
			  0x50,0x72,0x3c,0x96,0x30,0x69,0x1f,0x1a,0x05,0xa7,0x28,0x1d,0xbe,0x6c,0x10,0x86 }
		}
	};

	size_t passed = 0;
	size_t test_vector_count = sizeof(test_vector) / sizeof(test_vector[0]);
	for(size_t i=0; i<test_vector_count; i++) {
		for(size_t j=0; j<test_func_count; j++) {
			printf("[%s] running test #%zu...\n", test_func[j].name, i);
			if(test_func[j].fn(&test_vector[i]) == false) {
				fprintf(stderr, "[%s] test #%zu failed.\n", test_func[j].name, i);
			} else {
				passed++;
			}
		}
	}
	printf("%zu out of %zu tests passed.\n", passed, test_vector_count*test_func_count);

	return EXIT_SUCCESS;
}
#endif // STUPID_SHA2_TEST

#endif // STUPID_SHA2_IMPLEMENTATION
